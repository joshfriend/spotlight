import com.vanniktech.maven.publish.SonatypeHost

plugins {
  id 'java-gradle-plugin'
  id 'com.gradle.plugin-publish'
  id 'com.vanniktech.maven.publish'
  id 'com.autonomousapps.testkit'
  id 'com.autonomousapps.plugin-best-practices-plugin'
  id 'org.jetbrains.kotlin.jvm'
  id 'org.jetbrains.kotlinx.binary-compatibility-validator'
  id 'com.android.lint'
}

group = "com.fueledbycaffeine.spotlight"
version = VERSION_NAME

gradlePlugin {
  vcsUrl = "https://github.com/joshfriend/spotlight"
  website = "https://github.com/joshfriend/spotlight"
  plugins {
    spotlight {
      id = "com.fueledbycaffeine.spotlight"
      implementationClass = "com.fueledbycaffeine.spotlight.SpotlightSettingsPlugin"
      displayName = "Spotlight"
      description = "A plugin that makes managing `settings.gradle(.kts)` for large projects easier"
      tags = ["IDE", "dependencies"]
    }
  }
}

mavenPublishing {
  publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL, true)
  signAllPublications()

  pom {
    name = "Spotlight Gradle plugin"
    description = "A Gradle plugin that and makes managing `settings.gradle(.kts)` for large projects easier"
    inceptionYear = "2025"
    url = "https://github.com/joshfriend/spotlight/"
    licenses {
      license {
        name = "MIT License"
        url = "https://choosealicense.com/licenses/mit/"
        distribution = "https://choosealicense.com/licenses/mit/"
      }
    }
    developers {
      developer {
        id = "joshfriend"
        name = "Josh Friend"
        url = "https://github.com/joshfriend/"
      }
    }
    scm {
      url = "https://github.com/joshfriend/spotlight/"
      connection = "scm:git:git://github.com/joshfriend/spotlight.git"
      developerConnection = "scm:git:ssh://git@github.com/joshfriend/spotlight.git"
    }
  }
}

kotlin {
  explicitApi()
}

gradleTestKitSupport {
  withSupportLibrary()
  withTruthLibrary()
}

dependencyAnalysis {
  issues {
    onIncorrectConfiguration {
      exclude libs.autonomousapps.testkit.support
    }
  }
}

def main = sourceSets["main"]

// Add a source set for the functional test suite. This must come _above_ the `dependencies` block.
def functionalTestSourceSet = sourceSets.maybeCreate("functionalTest")
functionalTestSourceSet.compileClasspath += main.output + configurations["testRuntimeClasspath"]
functionalTestSourceSet.runtimeClasspath += functionalTestSourceSet.output + functionalTestSourceSet.compileClasspath

dependencies {
  api project(':buildscript-utils')

  lintChecks(libs.lint.gradle)

  functionalTestImplementation libs.truth
  functionalTestImplementation libs.moshi.kotlin

  testImplementation libs.assertk
  testImplementation platform(libs.junit.platform)
  testImplementation libs.junit.jupiter
  testRuntimeOnly libs.junit.launcher
}

tasks.withType(ValidatePlugins).configureEach {
  enableStricterValidation = true
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
}